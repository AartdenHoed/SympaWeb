<div class="controller">
    <div class="sy-service">
    </div>
    @model ConfigMan.ViewModels.ServiceVM

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()


<div>
    <h2>
        @Html.DisplayFor(model => model.Message.Title)
    </h2>
    <hr />
    @Html.HiddenFor(model => model.ComputerID)
    @Html.HiddenFor(model => model.Name)
    @Html.HiddenFor(model => model.ComponentID)


    <dl class="sy-dl">
        <dt class="sy-dt">
            @Html.DisplayNameFor(model => model.StartDate)
        </dt>
        <dd class="sy-dd">
            @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "sy-readonly", @readonly = "readonly" } })
        </dd>
        <dt class="sy-dt">
            @Html.DisplayNameFor(model => model.CheckDate)
        </dt>
        <dd class="sy-dd">
            @Html.EditorFor(model => model.CheckDate, new { htmlAttributes = new { @class = "sy-readonly", @readonly = "readonly" } })
        </dd>
        <dt class="sy-dt">
            @Html.DisplayNameFor(model => model.PSComputerName)
        </dt>
        <dd class="sy-dd">
            @Html.EditorFor(model => model.PSComputerName, new { htmlAttributes = new { @class = "sy-readonly", @readonly = "readonly" } })
        </dd>
        <dt class="sy-dt">
            @Html.DisplayNameFor(model => model.ComponentName)
        </dt>
        <dd class="sy-dd">
            @Html.DropDownListFor(model => model.SelectedComponentIDstring, new SelectList(Model.ComponentLijst, "ComponentIDstring", "ComponentNameTemplate"),
              new { @class = "sy-field" })
            @Html.ValidationMessageFor(model => model.SelectedComponentIDstring, "", new { @class = "text-danger" })
        </dd>
        <dt class="sy-dt">
            @Html.DisplayNameFor(model => model.SystemName)
        </dt>
        <dd class="sy-dd">
            @Html.EditorFor(model => model.SystemName, new { htmlAttributes = new { @class = "sy-readonly", @readonly = "readonly" } })
        </dd>
        <dt class="sy-dt">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class="sy-dd">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "sy-readonly", @readonly = "readonly" } })
        </dd>
        <dt class="sy-dt">
            @Html.DisplayNameFor(model => model.Suffix)
        </dt>
        <dd class="sy-dd">
            @Html.EditorFor(model => model.Suffix, new { htmlAttributes = new { @class = "sy-readonly", @readonly = "readonly" } }) &nbsp;
        </dd>
        <dt class="sy-dt">
            @Html.DisplayNameFor(model => model.Caption)
        </dt>
        <dd class="sy-dd">
            @Html.EditorFor(model => model.Caption, new { htmlAttributes = new { @class = "sy-readonly", @readonly = "readonly" } })
        </dd>
        <dt class="sy-dt">
            @Html.DisplayNameFor(model => model.DisplayName)
        </dt>
        <dd class="sy-dd">
            @Html.EditorFor(model => model.DisplayName, new { htmlAttributes = new { @class = "sy-readonly", @readonly = "readonly" } })
        </dd>
        <dt class="sy-dt">
            @Html.DisplayNameFor(model => model.PathName)
        </dt>
        <dd class="sy-dd">
            @Html.EditorFor(model => model.PathName, new { htmlAttributes = new { @class = "sy-readonly", @readonly = "readonly" } })
        </dd>
        <dt class="sy-dt">
            @Html.DisplayNameFor(model => model.ServiceType)
        </dt>
        <dd class="sy-dd">
            @Html.EditorFor(model => model.ServiceType, new { htmlAttributes = new { @class = "sy-readonly", @readonly = "readonly" } })
        </dd>
        <dt class="sy-dt">
            @Html.DisplayNameFor(model => model.StartMode)
        </dt>
        <dd class="sy-dd">
            @Html.EditorFor(model => model.StartMode, new { htmlAttributes = new { @class = "sy-readonly", @readonly = "readonly" } })
        </dd>
        <dt class="sy-dt">
            @Html.DisplayNameFor(model => model.Started)
        </dt>
        <dd class="sy-dd">
            @Html.EditorFor(model => model.Started, new { htmlAttributes = new { @class = "sy-readonly", @readonly = "readonly" } })
        </dd>
        <dt class="sy-dt">
            @Html.DisplayNameFor(model => model.State)
        </dt>
        <dd class="sy-dd">
            @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "sy-readonly", @readonly = "readonly" } })
        </dd>
        <dt class="sy-dt">
            @Html.DisplayNameFor(model => model.Status)
        </dt>
        <dd class="sy-dd">
            @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "sy-readonly", @readonly = "readonly" } })
        </dd>
        <dt class="sy-dt">
            @Html.DisplayNameFor(model => model.ExitCode)
        </dt>
        <dd class="sy-dd">
            @Html.EditorFor(model => model.ExitCode, new { htmlAttributes = new { @class = "sy-readonly", @readonly = "readonly" } })
        </dd>
        <dt class="sy-dt">
            @Html.DisplayNameFor(model => model.Description)
        </dt>
        <dd class="sy-dd">
            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "sy-readonly", @readonly = "readonly" } })
        </dd>
        <dt class="sy-dt">
            @Html.DisplayNameFor(model => model.Software)
        </dt>
        <dd class="sy-dd">
            @Html.EditorFor(model => model.Software, new { htmlAttributes = new { @class = "sy-readonly", @readonly = "readonly" } })
        </dd>
        <dt class="sy-dt">
            @Html.DisplayNameFor(model => model.ChangeState)
        </dt>
        <dd class="sy-dd">
            @Html.EditorFor(model => model.ChangeState, new { htmlAttributes = new { @class = "sy-readonly", @readonly = "readonly" } })
        </dd>
        <dt class="sy-dt">
            @Html.DisplayNameFor(model => model.OldChangeState)
        </dt>
        <dd class="sy-dd">
            @Html.EditorFor(model => model.OldChangeState, new { htmlAttributes = new { @class = "sy-readonly", @readonly = "readonly" } }) &nbsp;
        </dd>
        <dt class="sy-dt">
            @Html.DisplayNameFor(model => model.DirectoryTemplate)
        </dt>
        <dd class="sy-dd">
            @Html.EditorFor(model => model.DirectoryTemplate, new { htmlAttributes = new { @class = "sy-input", @autofocus = "autofocus" } })
            @Html.ValidationMessageFor(model => model.DirectoryTemplate, "", new { @class = "text-danger" })
        </dd>
        <dt class="sy-dt">
            @Html.DisplayNameFor(model => model.DirName)
        </dt>
        <dd class="sy-dd">
            @Html.EditorFor(model => model.DirName, new { htmlAttributes = new { @class = "sy-readonly", @readonly = "readonly" } })
        </dd>
        <dt class="sy-dt">
            @Html.DisplayNameFor(model => model.OldDirName)
        </dt>
        <dd class="sy-dd">
            @Html.EditorFor(model => model.OldDirName, new { htmlAttributes = new { @class = "sy-readonly", @readonly = "readonly" } })&nbsp;
        </dd>
        <dt class="sy-dt">
            @Html.DisplayNameFor(model => model.ProgramName)
        </dt>
        <dd class="sy-dd">
            @Html.EditorFor(model => model.ProgramName, new { htmlAttributes = new { @class = "sy-readonly", @readonly = "readonly" } })
        </dd>
        <dt class="sy-dt">
            @Html.DisplayNameFor(model => model.OldProgramName)
        </dt>
        <dd class="sy-dd">
            @Html.EditorFor(model => model.OldProgramName, new { htmlAttributes = new { @class = "sy-readonly", @readonly = "readonly" } }) &nbsp;
        </dd>
        <dt class="sy-dt">
            @Html.DisplayNameFor(model => model.Parameter)
        </dt>
        <dd class="sy-dd">
            @Html.EditorFor(model => model.Parameter, new { htmlAttributes = new { @class = "sy-readonly", @readonly = "readonly" } })&nbsp;
        </dd>
        <dt class="sy-dt">
            @Html.DisplayNameFor(model => model.OldParameter)
        </dt>
        <dd class="sy-dd">
            @Html.EditorFor(model => model.OldParameter, new { htmlAttributes = new { @class = "sy-readonly", @readonly = "readonly" } }) &nbsp;
        </dd>

    </dl>
</div>
<div>
    @Html.HiddenFor(model => model.ComputerID, new { @class = "sy-hiddenid" })
    @Html.HiddenFor(model => model.Name, new { @class = "sy-hiddenid2" })
    @Html.HiddenFor(model => model.FilterData.Filterstr, new { @class = "sy-hiddenfilter" })
    @Html.HiddenFor(model => model.FilterData.Subsetstr, new { @class = "sy-hiddenfilter" })
    @Html.HiddenFor(model => model.FilterData.ServiceNaamFilter, new { @class = "sy-hiddenfilter" })
    @Html.HiddenFor(model => model.FilterData.SysteemFilter, new { @class = "sy-hiddenfilter" })
    @Html.HiddenFor(model => model.FilterData.ServiceNaamFilter, new { @class = "sy-hiddenfilter" })
    @Html.HiddenFor(model => model.FilterData.ChangeStateFilter, new { @class = "sy-hiddenfilter" })
    @Html.HiddenFor(model => model.FilterData.ComponentFilter, new { @class = "sy-hiddenfilter" })
    @Html.HiddenFor(model => model.FilterData.DirectoryFilter, new { @class = "sy-hiddenfilter" })
    @Html.HiddenFor(model => model.FilterData.TemplateFilter, new { @class = "sy-hiddenfilter" })
    @Html.HiddenFor(model => model.FilterData.ProgramFilter, new { @class = "sy-hiddenfilter" })

</div>

        <p>
            @Html.DisplayFor(model => model.Message.Tekst)
        </p>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Opslaan" class="sy-button" /> |  @Html.ActionLink("Terug naar lijst", "Index", "", new { @class = "sy-url" })

            </div>
        </div>
    }
</div>
  
